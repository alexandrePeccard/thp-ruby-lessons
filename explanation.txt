Explications :

Exercice 2 :
Print permet d'afficher une chaîne de caractère.
Puts permet la même chose ainsi que d'utiliser une variable pour compléter la chaîne, en utilisant le symbole '#'.

Exercice 3 :
Le symbole '#' permet de mettre une ligne de code en commentaire, elle n'est pas executée et sert surtout aux développeurs pour s'y retrouver.

Exercice 4 :
Une chaîne de caractère doit se trouver entre deux symboles comme ceci : "Test". Dans l'exercice, le symbole de fin de chaîne de caractère n'est pas présent.
Donc l'interpréteur génère une erreur : "exo_04.rb:1: unterminated string meets end of file".

Exercice 5 :
Le "#{}" permet de dire à l'interpréteur ruby qu'on va insérer une variable et non une chaîne de caractère.

Exercice 6 :
En fait la variables "number_of_minutes_in_an_hour" utilisées dans la séquence n'a pas été déclarée: 

	puts "Et en minutes ça fait : #{number_of_minutes_in_an_hour * number_of_hours_worked_per_day * number_of_days_worked_per_week * number_of_weeks_in_THP}"

Donc l'interpréteur renvoie une erreur car la resources qu'on lui demande d'utiliser n'existe pas.
Même s'il est assez malin car il propose une variable avec un nom proche qui existe cette fois ;o

	Did you mean? "number_of_weeks_in_THP"

Exercice 7 :
gets est une fonction qui permet à l'utilisateur du programme de saisir du texte et de le récupérer.
Ainsi on stocke dans la variable user_name ce qu'on à récupérer grâce la fonction gets après que l'utilisateur ai appuyé sur entrée.
Normalement gets récupère aussi les caractères de fin de ligne, d'où l'emploi de la fonction chomp qui est en fait une méthode de la classe String. 
Or la saisie de l'utilisateur est précisément un objet de type string.

La différence entre les trois programmes est simple.

Le premier affiche une chaine demande un nom, puis enregistre la réponse et l'affiche.
Le second affiche une chaine, puis affiche un ">" pour inviter l'utilisateur à répondre, puis affiche le résultat.
Le dernier se contente d'attendre la réponse de l'utilisateur puis de l'afficher. 